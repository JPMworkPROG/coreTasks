version: '3.8'

services:
  # API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: production
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_DURABLE=false
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  # Auth Service
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: production
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_DURABLE=false
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  # Task Service
  task-service:
    container_name: task-service
    build:
      context: .
      dockerfile: ./apps/task-service/Dockerfile
      target: production
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_DURABLE=false
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  # User Service
  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
      target: production
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_DURABLE=false
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  # Notification Service
  notification-service:
    container_name: notification-service
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
      target: production
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  # Web Application - Instance 1
  web-1:
    container_name: web-1
    image: coretasks-web:latest
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=http://localhost:3000
        - VITE_WEBSOCKET_URL=http://localhost:3003
        - VITE_API_DELAY_MIN=200
        - VITE_API_DELAY_MAX=400
        - VITE_API_DELAY_GET_USERS=200
        - VITE_API_DELAY_LIST_TASKS=300
        - VITE_API_DELAY_GET_TASK=250
        - VITE_API_DELAY_CREATE_TASK=400
        - VITE_API_DELAY_UPDATE_TASK=350
        - VITE_API_DELAY_DELETE_TASK=300
        - VITE_API_DELAY_GET_COMMENTS=250
        - VITE_API_DELAY_ADD_COMMENT=300
        - VITE_PAGINATION_USERS_LIMIT=10
        - VITE_PAGINATION_COMMENTS_LIMIT=10
        - VITE_PAGINATION_HISTORY_LIMIT=10
        - VITE_WEBSOCKET_INTERVAL=30000
        - VITE_WEBSOCKET_NOTIFICATION_PROBABILITY=0.7
        - VITE_AUTH_SIMULATION_DELAY=1000
        - VITE_APP_NAME=TaskManager
        - VITE_APP_DESCRIPTION=Gerenciador de Tarefas Colaborativo
    ports:
      - '8080:80'
    depends_on:
      - api-gateway
      - notification-service
    networks:
      - challenge-network

  # Web Application - Instance 2 (reusa a mesma imagem)
  web-2:
    container_name: web-2
    image: coretasks-web:latest
    ports:
      - '8081:80'
    depends_on:
      - api-gateway
      - notification-service
      - web-1
    networks:
      - challenge-network

  # Postgres Database
  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    attach: false
    ports:
      - '5432:5432'
    networks:
      - challenge-network
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: coreTask
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d coreTask"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    attach: false
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - challenge-network
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes: ['rabbitmq_data:/var/lib/rabbitmq']
    healthcheck:
      test: ["CMD", "sh", "-c", "rabbitmq-diagnostics check_port_connectivity && rabbitmq-diagnostics check_virtual_hosts && rabbitmq-diagnostics check_local_alarms"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  challenge-network:
    driver: bridge